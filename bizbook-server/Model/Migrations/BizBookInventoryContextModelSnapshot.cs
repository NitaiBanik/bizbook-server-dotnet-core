// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;

namespace Model.Migrations
{
    [DbContext(typeof(BizBookInventoryContext))]
    partial class BizBookInventoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview5.19227.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Model.Model.Customers.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("AddressName")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Area")
                        .HasColumnType("varchar(172)");

                    b.Property<string>("ContactName")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Country")
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("District")
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDefault");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PostCode")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("SpecialNote")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("varchar(700)");

                    b.Property<string>("Thana")
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShopId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Model.Model.Customers.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Company")
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("IsActive");

                    b.Property<string>("MembershipCardNo")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("NationalId")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Occupation")
                        .HasColumnType("varchar(32)");

                    b.Property<int>("OrdersCount");

                    b.Property<double>("OtherAmount");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<int>("Point");

                    b.Property<double>("ProductAmount");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("TotalAmount");

                    b.Property<double>("TotalDiscount");

                    b.Property<double>("TotalDue");

                    b.Property<double>("TotalPaid");

                    b.Property<string>("University")
                        .HasColumnType("varchar(32)");

                    b.Property<int>("WcId");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Model.Model.District", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Model.Model.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Salary");

                    b.Property<double>("SaleAchivedAmount");

                    b.Property<double>("SaleTargetAmount");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Model.Model.Products.Brand", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("BrandCode")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Country")
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<string>("MadeInCountry")
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Model.Model.Products.ProductCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProductGroupId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<int>("WcId");

                    b.HasKey("Id");

                    b.HasIndex("ProductGroupId");

                    b.HasIndex("ShopId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Model.Model.Products.ProductDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("BarCode")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("BrandId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("CostPrice");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<double>("DealerPrice");

                    b.Property<int>("ExpireInDays");

                    b.Property<bool>("HasExpiryDate");

                    b.Property<bool>("HasUniqueSerial");

                    b.Property<bool>("HasWarrenty");

                    b.Property<bool>("IsActive");

                    b.Property<int>("MinimumStockToNotify");

                    b.Property<string>("Model")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("OnHand");

                    b.Property<string>("ProductCategoryId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProductCode")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Purchased");

                    b.Property<double>("SalePrice");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Sold");

                    b.Property<int>("StartingInventory");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ShopId");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("Model.Model.Products.ProductGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("ProductGroups");
                });

            modelBuilder.Entity("Model.Model.Purchases.Purchase", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<double>("DiscountAmount");

                    b.Property<double>("DueAmount");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("OrderDate");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("OrderReferenceNumber")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("OtherAmount");

                    b.Property<double>("PaidAmount");

                    b.Property<double>("ProductAmount");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShipmentTrackingNo")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("ShippingAmount");

                    b.Property<string>("ShippingProvider")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("State")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("SupplierId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("TotalAmount");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Model.Model.Purchases.PurchaseDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("CostPricePerUnit");

                    b.Property<double>("CostTotal");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Paid");

                    b.Property<double>("Payable");

                    b.Property<string>("ProductDetailId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PurchaseId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Quantity");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("ProductDetailId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("ShopId");

                    b.ToTable("PurchaseDetails");
                });

            modelBuilder.Entity("Model.Model.Purchases.Supplier", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Area")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Country")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("District")
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsVerified");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("OrdersCount");

                    b.Property<double>("OtherAmount");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PostCode")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("ProductAmount");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Thana")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("TotalAmount");

                    b.Property<double>("TotalDiscount");

                    b.Property<double>("TotalDue");

                    b.Property<double>("TotalPaid");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Model.Model.Sales.Dealer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Area")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Country")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("District")
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsVerified");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("OrdersCount");

                    b.Property<double>("OtherAmount");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PostCode")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("ProductAmount");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Thana")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("TotalAmount");

                    b.Property<double>("TotalDiscount");

                    b.Property<double>("TotalDue");

                    b.Property<double>("TotalPaid");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("Dealers");
                });

            modelBuilder.Entity("Model.Model.Sales.Sale", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("AddressId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("CostAmount");

                    b.Property<string>("CourierName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("CustomerArea")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CustomerNote")
                        .HasColumnType("varchar(800)");

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("DealerId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("DeliveryChargeAmount");

                    b.Property<string>("DeliveryTrackingNo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DeliverymanId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("DeliverymanName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DeliverymanPhone")
                        .HasColumnType("varchar(32)");

                    b.Property<double>("DiscountAmount");

                    b.Property<double>("DueAmount");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDealerSale");

                    b.Property<bool>("IsTaggedSale");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrderReferenceNumber")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("OrderState");

                    b.Property<double>("OtherAmount");

                    b.Property<double>("PaidAmount");

                    b.Property<string>("ParentSaleId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("PayableTotalAmount");

                    b.Property<double>("PaymentServiceChargeAmount");

                    b.Property<double>("ProductAmount");

                    b.Property<double>("ProfitAmount");

                    b.Property<double>("ProfitPercent");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime?>("RequiredDeliveryDate");

                    b.Property<string>("RequiredDeliveryTime")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("SaleChannel");

                    b.Property<int>("SaleFrom");

                    b.Property<string>("SaleTag")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("TaxAmount");

                    b.Property<double>("TotalAmount");

                    b.Property<int>("Version");

                    b.Property<int?>("WcCustomerId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DealerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ShopId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Model.Model.Sales.SaleDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("CostPricePerUnit");

                    b.Property<double>("CostTotal");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<double>("DiscountTotal");

                    b.Property<double>("DueAmount");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsReturned");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("PaidAmount");

                    b.Property<double>("PriceTotal");

                    b.Property<string>("ProductDetailId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProductSerialNumber")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Quantity");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ReturnReason")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("SaleId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("SalePricePerUnit");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Total");

                    b.HasKey("Id");

                    b.HasIndex("ProductDetailId");

                    b.HasIndex("SaleId");

                    b.HasIndex("ShopId");

                    b.ToTable("SaleDetails");
                });

            modelBuilder.Entity("Model.Model.Sales.SaleState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("SaleId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("State")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.HasIndex("ShopId");

                    b.ToTable("SaleStates");
                });

            modelBuilder.Entity("Model.Model.Transactions.AccountHead", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("AccountHeadType");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("AccountHeads");
                });

            modelBuilder.Entity("Model.Model.Transactions.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("AccountHeadId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Amount");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ContactPersonPhone")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ParentId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ParentName")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("TransactionDate");

                    b.Property<int>("TransactionFlowType");

                    b.Property<int>("TransactionFor");

                    b.Property<int>("TransactionMedium");

                    b.Property<string>("TransactionNumber")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("TransactionWith");

                    b.Property<string>("WalletId")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("AccountHeadId");

                    b.HasIndex("ShopId");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Model.Model.Transactions.Wallet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(100);

                    b.Property<double>("Balance");

                    b.Property<string>("BankName")
                        .HasMaxLength(50);

                    b.Property<string>("CardNumber")
                        .HasMaxLength(20);

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(20);

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("StartingBalance");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("WalletType");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Model.Shops.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("About")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Area")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ChalanName")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ContactPersonDesignation")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ContactPersonPhone")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Country")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<float>("DeliveryCharge");

                    b.Property<string>("District")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("ExpiryDate");

                    b.Property<string>("Facebook")
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("HasDeliveryChain");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAutoAddToCart");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsShowOrderNumber");

                    b.Property<bool>("IsVerified");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PostCode")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ReceiptName")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("SubscriptionType")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Thana")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("TotalUsers");

                    b.Property<string>("WcKey")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("WcSecret")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("WcUrl")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("WcVersion")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("WcWebhookSource")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Website")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("Model.Model.Customers.Address", b =>
                {
                    b.HasOne("Model.Model.Customers.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("Addresses")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Model.Customers.Customer", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("Customers")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Model.Employee", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("Employees")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Model.Products.Brand", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("Brands")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Model.Products.ProductCategory", b =>
                {
                    b.HasOne("Model.Model.Products.ProductGroup", "ProductGroup")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Model.Products.ProductDetail", b =>
                {
                    b.HasOne("Model.Model.Products.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.Products.ProductCategory", "ProductCategory")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Model.Products.ProductGroup", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("ProductGroups")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Model.Purchases.Purchase", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("Purchases")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Model.Purchases.Supplier", "Supplier")
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.Purchases.PurchaseDetail", b =>
                {
                    b.HasOne("Model.Model.Products.ProductDetail", "ProductDetail")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.Purchases.Purchase", "Purchase")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Model.Purchases.Supplier", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("Suppliers")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Model.Sales.Dealer", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("Dealers")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Model.Sales.Sale", b =>
                {
                    b.HasOne("Model.Model.Customers.Address", "Address")
                        .WithMany("Sales")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.Customers.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.Sales.Dealer", "Dealer")
                        .WithMany("Sales")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("Sales")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Model.Sales.SaleDetail", b =>
                {
                    b.HasOne("Model.Model.Products.ProductDetail", "ProductDetail")
                        .WithMany("SaleDetails")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.Sales.Sale", "Sale")
                        .WithMany("SaleDetails")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("SaleDetails")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Model.Sales.SaleState", b =>
                {
                    b.HasOne("Model.Model.Sales.Sale", "Sale")
                        .WithMany("SaleStates")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("SaleStates")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Model.Transactions.AccountHead", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("AccountHeads")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Model.Transactions.Transaction", b =>
                {
                    b.HasOne("Model.Model.Transactions.AccountHead", "AccountHead")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountHeadId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("Transactions")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Model.Transactions.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.Transactions.Wallet", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("Wallets")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
